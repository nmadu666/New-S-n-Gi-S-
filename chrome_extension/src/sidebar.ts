/**
 * ===================================================================
 * LOGIC CH√çNH CHO SIDEBAR TRA C·ª®U M√ÄU S∆†N
 * ===================================================================
 * File n√†y tri·ªÉn khai to√†n b·ªô logic nghi·ªáp v·ª• ƒë√£ ƒë·ªãnh nghƒ©a
 * trong file GEMINI.md.
 */

import { AllData, Color, ColorPricing, ParentProduct, Product, Trademark } from '@shared/types';
import './sidebar.scss';

// !!! QUAN TR·ªåNG: D√ÅN URL APP SCRIPT C·ª¶A B·∫†N V√ÄO ƒê√ÇY !!!
const API_URL = "https://script.google.com/macros/s/AKfycbxub034UvLNAad2lkELjIkRqsN7yJqFCLBnG8pbqNascU6MiC1vODHpQG_UwPhKnMY/exec"; // Thay th·∫ø b·∫±ng URL c·ªßa b·∫°n

// --- START CACHING CONFIG ---
const CACHE_KEY = 'paint_app_data_v1'; // Thay ƒë·ªïi version ƒë·ªÉ x√≥a cache c≈© khi c√≥ thay ƒë·ªïi l·ªõn
const CACHE_DURATION_MS = 60 * 60 * 1000; // Th·ªùi gian cache: 1 gi·ªù (60 ph√∫t * 60 gi√¢y * 1000 ms)
// --- END CACHING CONFIG ---

// ƒê·ªãnh nghƒ©a ki·ªÉu cho State
interface AppState {
  panel: 'colors' | 'parentProducts' | 'skus';
  selectedColor: Color | null;
  selectedParentProduct: ParentProduct | null;
}

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ to√†n b·ªô c∆° s·ªü d·ªØ li·ªáu
let DB: AllData = { trademarks: [], colors: [], parentProducts: [], colorPricings: [], products: [] };

// Bi·∫øn l∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa UI
let fullColorList: Color[] = [];

let currentState: AppState = {
  panel: 'colors', // 'colors', 'parentProducts', 'skus'
  selectedColor: null,
  selectedParentProduct: null
};

// ƒê·ªãnh nghƒ©a c√°c ID DOM d∆∞·ªõi d·∫°ng h·∫±ng s·ªë ƒë·ªÉ d·ªÖ qu·∫£n l√Ω v√† tr√°nh l·ªói ch√≠nh t·∫£
const DOM_IDS = {
  LOADER: 'loader',
  APP_CONTAINER: 'app-container',
  TRADEMARK_FILTER: 'trademark-filter',
  COLOR_SEARCH: 'color-search',
  BACK_BUTTON: 'back-button',
  REFRESH_BUTTON: 'refresh-button',
  PANEL_TITLE: 'panel-title',
  HEADER: 'header',
  COLOR_LIST_PANEL: 'color-list-panel',
  PARENT_PRODUCT_LIST_PANEL: 'parent-product-list-panel',
  SKU_LIST_PANEL: 'sku-list-panel',
  COLOR_LIST_CONTAINER: 'color-list',
  PARENT_PRODUCT_LIST_CONTAINER: 'parent-product-list',
  SKU_LIST_CONTAINER: 'sku-list'
};

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM ch√≠nh s·ª≠ d·ª•ng h·∫±ng s·ªë
const loader = document.getElementById(DOM_IDS.LOADER) as HTMLElement;
const appContainer = document.getElementById(DOM_IDS.APP_CONTAINER) as HTMLElement;
const trademarkFilter = document.getElementById(DOM_IDS.TRADEMARK_FILTER) as HTMLSelectElement;
const colorSearch = document.getElementById(DOM_IDS.COLOR_SEARCH) as HTMLInputElement;
const backButton = document.getElementById(DOM_IDS.BACK_BUTTON) as HTMLButtonElement;
const refreshButton = document.getElementById(DOM_IDS.REFRESH_BUTTON) as HTMLButtonElement;
const panelTitle = document.getElementById(DOM_IDS.PANEL_TITLE) as HTMLElement;
const headerElement = document.getElementById(DOM_IDS.HEADER) as HTMLElement;

// C√°c panel (s·ª≠ d·ª•ng h·∫±ng s·ªë)
const panels = {
  colors: document.getElementById(DOM_IDS.COLOR_LIST_PANEL) as HTMLElement,
  parentProducts: document.getElementById(DOM_IDS.PARENT_PRODUCT_LIST_PANEL) as HTMLElement,
  skus: document.getElementById(DOM_IDS.SKU_LIST_PANEL) as HTMLElement
};

// N∆°i render n·ªôi dung (s·ª≠ d·ª•ng h·∫±ng s·ªë)
const colorListContainer = document.getElementById(DOM_IDS.COLOR_LIST_CONTAINER) as HTMLElement;
const parentProductListContainer = document.getElementById(DOM_IDS.PARENT_PRODUCT_LIST_CONTAINER) as HTMLElement;
const skuListContainer = document.getElementById(DOM_IDS.SKU_LIST_CONTAINER) as HTMLElement;

// Ch·∫°y h√†m initialize khi DOM ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', initialize);

// G·∫Øn s·ª± ki·ªán cho c√°c b·ªô l·ªçc
/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi b·ªô l·ªçc h√£ng thay ƒë·ªïi.
 * G·ªçi h√†m `applyFilters` ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch m√†u.
 * @returns {void}
 */
trademarkFilter.addEventListener('change', handleTrademarkFilter);
colorSearch.addEventListener('input', handleColorSearch);
backButton.addEventListener('click', handleBackClick);
refreshButton.addEventListener('click', handleRefreshClick);

/**
 * ===================================================================
 * B∆Ø·ªöC 0: KH·ªûI T·∫†O (H√†m initialize())
 * ===================================================================
 * H√†m kh·ªüi t·∫°o ch√≠nh c·ªßa ·ª©ng d·ª•ng.
 * Th·ª±c hi·ªán t·∫£i d·ªØ li·ªáu t·ª´ API, x·ª≠ l√Ω l·ªói, hi·ªÉn th·ªã b·ªô l·ªçc h√£ng,
 * v√† render danh s√°ch m√†u ban ƒë·∫ßu.
 * @returns {Promise<void>}
 */
async function initialize() {
  console.log("B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ·ª©ng d·ª•ng...");
  loader.classList.remove('hidden');
  appContainer.classList.add('hidden');

  // --- START CACHING LOGIC ---
  const cachedItem = localStorage.getItem(CACHE_KEY);

  if (cachedItem) {
    try {
      const parsedCache = JSON.parse(cachedItem);
      const cacheAge = Date.now() - parsedCache.timestamp;

      if (cacheAge < CACHE_DURATION_MS) {
        console.log("Cache h·ª£p l·ªá. ƒêang s·ª≠ d·ª•ng...");
        setupApplication(parsedCache.data);
        return; // K·∫øt th√∫c s·ªõm n·∫øu d√πng cache th√†nh c√¥ng
      } else {
        console.log("Cache ƒë√£ h·∫øt h·∫°n. S·∫Ω t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi.");
        // --- START UX IMPROVEMENT ---
        // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng r·∫±ng cache ƒë√£ h·∫øt h·∫°n
        loader.innerHTML = `<p>D·ªØ li·ªáu ƒë√£ c≈©, ƒëang l√†m m·ªõi...</p>`;
        // --- END UX IMPROVEMENT ---
        localStorage.removeItem(CACHE_KEY); // X√≥a cache c≈©
      }
    } catch (e) {
      console.error("L·ªói parse d·ªØ li·ªáu cache, s·∫Ω t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi.", e);
      localStorage.removeItem(CACHE_KEY); // X√≥a cache h·ªèng
    }
  }
  // --- END CACHING LOGIC ---

  // N·∫øu kh√¥ng c√≥ cache ho·∫∑c cache b·ªã l·ªói, t·∫£i d·ªØ li·ªáu m·ªõi
  await fetchAndSetupApplication();
}

/**
 * T·∫£i d·ªØ li·ªáu t·ª´ API, l∆∞u v√†o cache v√† thi·∫øt l·∫≠p ·ª©ng d·ª•ng.
 */
async function fetchAndSetupApplication() {
  console.log("ƒêang t·∫£i d·ªØ li·ªáu m·ªõi t·ª´ API...");
  try {
    const response = await fetch(API_URL);
    if (!response.ok) {
      throw new Error(`API call failed with status: ${response.status}`);
    }
    const data: AllData & { success?: boolean, message?: string } = await response.json();

    if (data.success === false) {
      throw new Error(`API Error: ${data.message}`);
    }

    // --- START CACHING LOGIC ---
    const dataToCache = {
      timestamp: Date.now(),
      data: data,
    };
    localStorage.setItem(CACHE_KEY, JSON.stringify(dataToCache));
    console.log("D·ªØ li·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o cache.");
    // --- END CACHING LOGIC ---

    setupApplication(data);
  } catch (error: any) {
    console.error("L·ªói nghi√™m tr·ªçng khi t·∫£i d·ªØ li·ªáu:", error);
    loader.innerHTML = `
            <p style="color: red;"><strong>ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu!</strong></p>
            <p style="font-size: 12px; color: #333;">${error.message}</p>
            <p style="font-size: 12px; color: #333;">H√£y th·ª≠ l√†m m·ªõi ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.</p>
        `;
  }
}

/**
 * Thi·∫øt l·∫≠p giao di·ªán v√† logic ·ª©ng d·ª•ng t·ª´ d·ªØ li·ªáu ƒë√£ c√≥.
 * @param data - To√†n b·ªô d·ªØ li·ªáu t·ª´ API ho·∫∑c cache.
 */
function setupApplication(data: AllData) {
  DB = data;
  console.log("Database ƒë√£ s·∫µn s√†ng:", DB);

  // X√°c ƒë·ªãnh c√°c h√£ng c√≥ m√°y pha m√†u
    const mixingBrandIds = new Set<string | number>();
    if (DB.parentProducts) {
      DB.parentProducts.forEach(pp => {
        // N·∫øu `color_mixing_product_type` t·ªìn t·∫°i v√† kh√¥ng r·ªóng
        if (pp.color_mixing_product_type && pp.color_mixing_product_type.trim() !== "") {
          mixingBrandIds.add(pp.trademark_ref);
        }
      });
    }
    console.log("C√°c h√£ng c√≥ m√°y pha m√†u (IDs):", mixingBrandIds);

  renderTrademarks(mixingBrandIds);

  fullColorList = DB.colors || [];
  renderColors(fullColorList);

  loader.classList.add('hidden');
  appContainer.classList.remove('hidden');
  console.log("·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng.");
}

/**
 * Hi·ªÉn th·ªã danh s√°ch h√£ng (Trademarks) v√†o <select>
 * @param mixingBrandIds - Set c√°c ID c·ªßa h√£ng c√≥ m√°y pha m√†u
 * @returns {void}
 */
function renderTrademarks(mixingBrandIds: Set<string | number>) { // <--- ƒê√É C·∫¨P NH·∫¨T
  if (!DB.trademarks) {
    console.warn("Kh√¥ng t√¨m th·∫•y DB.trademarks");
    return;
  }
  trademarkFilter.innerHTML = '<option value="all">T·∫•t c·∫£ c√°c h√£ng</option>';

  // --- B·∫ÆT ƒê·∫¶U C·∫¢I TI·∫æN ---
  // S·∫Øp x·∫øp l·∫°i danh s√°ch: ∆∞u ti√™n h√£ng c√≥ m√°y pha m√†u l√™n ƒë·∫ßu, sau ƒë√≥ s·∫Øp x·∫øp theo t√™n
  const sortedTrademarks: Trademark[] = [...DB.trademarks].sort((a, b) => {
    const aHasMixing = mixingBrandIds.has(a.id);
    const bHasMixing = mixingBrandIds.has(b.id);

    if (aHasMixing && !bHasMixing) return -1; // a l√™n tr∆∞·ªõc
    if (!aHasMixing && bHasMixing) return 1;  // b l√™n tr∆∞·ªõc

    // N·∫øu c·∫£ hai ƒë·ªÅu c√≥ ho·∫∑c kh√¥ng c√≥, s·∫Øp x·∫øp theo t√™n
    return a.tradeMarkName.localeCompare(b.tradeMarkName);
  });
  // --- K·∫æT TH√öC C·∫¢I TI·∫æN ---

  sortedTrademarks.forEach(brand => { // <--- ƒê√É C·∫¨P NH·∫¨T (d√πng sortedTrademarks)
    const option = document.createElement('option');
    option.value = String(brand.id);

    // --- B·∫ÆT ƒê·∫¶U C·∫¢I TI·∫æN ---
    // Th√™m d·∫•u hi·ªáu nh·∫≠n bi·∫øt
    if (mixingBrandIds.has(brand.id)) {
      option.textContent = `üé® ${brand.tradeMarkName} (Pha m√†u)`;
      option.style.fontWeight = '600'; // In ƒë·∫≠m
      option.style.color = '#0056b3'; // ƒê·ªïi m√†u
    } else {
      option.textContent = `${brand.tradeMarkName}`;
    }
    // --- K·∫æT TH√öC C·∫¢I TI·∫æN ---

    trademarkFilter.appendChild(option);
  });
}

/**
 * Hi·ªÉn th·ªã danh s√°ch m√†u (Colors) ra UI
 * @param colorsToRender - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng m√†u c·∫ßn hi·ªÉn th·ªã
 * @returns {void}
 */
function renderColors(colorsToRender: Color[]) {
  colorListContainer.innerHTML = ''; // X√≥a n·ªôi dung c≈©
  if (!colorsToRender || colorsToRender.length === 0) {
    colorListContainer.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y m√†u ph√π h·ª£p.</p>';
    return;
  }

  colorsToRender.forEach(color => {
    const item = document.createElement('div');
    item.className = 'color-item';
    // Truy·ªÅn ID v√†o dataset ƒë·ªÉ l·∫•y khi click
    item.dataset.colorId = String(color.id);
    item.innerHTML = `
            <div class="color-swatch" style="background-color: ${color.hexCode || '#eee'}"></div>
            <div class="color-info">
                <span class="color-code">${color.code || 'N/A'}</span>
                <span class="color-name">${color.name || '...'}</span>
            </div>
        `;
    // G·∫Øn s·ª± ki·ªán click
    item.addEventListener('click', () => onColorClick(color));
    colorListContainer.appendChild(item);
  });
}

/**
 * ===================================================================
 * B∆Ø·ªöC 1: L·ªåC M√ÄU (H√£ng & T√¨m ki·∫øm)
 * ===================================================================
 * X·ª≠ l√Ω s·ª± ki·ªán khi b·ªô l·ªçc h√£ng thay ƒë·ªïi.
 * @returns {void}
 */
function handleTrademarkFilter() {
  applyFilters();
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫≠p v√†o √¥ t√¨m ki·∫øm m√†u.
 * G·ªçi h√†m `applyFilters` ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch m√†u.
 * @returns {void}
 */
function handleColorSearch() {
  applyFilters();
}

/**
 * H√†m t·ªïng h·ª£p ƒë·ªÉ l·ªçc v√† hi·ªÉn th·ªã m√†u s·∫Øc
 * L·ªçc `fullColorList` d·ª±a tr√™n gi√° tr·ªã c·ªßa `trademarkFilter` v√† `colorSearch`.
 * Sau ƒë√≥ g·ªçi `renderColors` ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£.
 * @returns {void}
 */
function applyFilters() {
  const brandId = trademarkFilter.value;
  const searchTerm = colorSearch.value.toLowerCase().trim();

  let filteredColors: Color[] = fullColorList;

  // 1. L·ªçc theo H√£ng
  if (brandId !== 'all') {
    filteredColors = filteredColors.filter(color => color.trademark_ref == brandId);
  }

  // 2. L·ªçc theo T·ª´ kh√≥a t√¨m ki·∫øm (t√¨m c·∫£ t√™n v√† m√£ m√†u)
  if (searchTerm) {
    filteredColors = filteredColors.filter(color =>
      (color.name && color.name.toLowerCase().includes(searchTerm)) ||
      (color.code && color.code.toLowerCase().includes(searchTerm))
    );
  }

  renderColors(filteredColors);
}

/**
 * ===================================================================
 * B∆Ø·ªöC 2: CH·ªåN M√ÄU (H√†m onColorClick(color))
 * ===================================================================
 * X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng click v√†o m·ªôt m√†u.
 * L·ªçc ra c√°c d√≤ng s·∫£n ph·∫©m (ParentProduct) ph√π h·ª£p v·ªõi m√†u ƒë√£ ch·ªçn
 * v√† chuy·ªÉn sang panel hi·ªÉn th·ªã danh s√°ch d√≤ng s·∫£n ph·∫©m.
 * @param color - ƒê·ªëi t∆∞·ª£ng m√†u ƒë√£ ch·ªçn.
 * ===================================================================
 */
function onColorClick(color: Color) {
  console.log("ƒê√£ ch·ªçn m√†u:", color);
  currentState.selectedColor = color; // L∆∞u m√†u ƒë√£ ch·ªçn

  // Logic:
  if (!DB.colorPricings || !DB.parentProducts) {
    return;
  }
  // 1. L·ªçc `DB.colorPricings` ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c d√≤ng c√≥ `color_ref`
  const matchingPricings = DB.colorPricings.filter(p => p.color_ref == color.id);

  // 2. T·ª´ k·∫øt qu·∫£, l·∫•y ra danh s√°ch duy nh·∫•t c√°c `color_mixing_product_type`
  const allowedTypes = [...new Set(matchingPricings.map(p => p.color_mixing_product_type))];
  // -> (v√≠ d·ª•: ['int_1', 'int_2', 'ext_1', 'sd'])

  // 3. D√πng danh s√°ch `type` n√†y, l·ªçc `DB.parentProducts`
  const applicableParentProducts = DB.parentProducts.filter(pp =>
    allowedTypes.includes(pp.color_mixing_product_type)
  );

  console.log("C√°c d√≤ng s·∫£n ph·∫©m ph√π h·ª£p:", applicableParentProducts);

  // 4. Hi·ªÉn th·ªã danh s√°ch ParentProduct ph√π h·ª£p
  renderParentProducts(applicableParentProducts);

  // 5. Chuy·ªÉn UI sang panel D√≤ng s·∫£n ph·∫©m
  navigateToPanel('parentProducts', `M√†u: ${color.code} - ${color.name}`);
}

/**
 * Hi·ªÉn th·ªã danh s√°ch D√≤ng s·∫£n ph·∫©m (ParentProduct) ra UI.
 * M·ªói d√≤ng s·∫£n ph·∫©m s·∫Ω c√≥ th·ªÉ click ƒë·ªÉ xem chi ti·∫øt SKU.
 * @param parentProducts - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ParentProduct c·∫ßn hi·ªÉn th·ªã.
 * @returns {void}
 */
function renderParentProducts(parentProducts: ParentProduct[]) {
  parentProductListContainer.innerHTML = ''; // X√≥a n·ªôi dung c≈©
  if (!parentProducts || parentProducts.length === 0) {
    parentProductListContainer.innerHTML = '<p>M√†u n√†y kh√¥ng pha ƒë∆∞·ª£c cho d√≤ng s·∫£n ph·∫©m n√†o.</p>';
    return;
  }

  parentProducts.forEach(pp => {
    const item = document.createElement('div');
    item.className = 'list-item';
    item.dataset.parentProductId = String(pp.id);
    item.innerHTML = `
            <strong>${pp.name || 'N/A'}</strong>
            <span>(Lo·∫°i: ${pp.color_mixing_product_type || 'N/A'})</span>
        `;
    // G·∫Øn s·ª± ki·ªán click
    item.addEventListener('click', () => onParentProductClick(pp));
    parentProductListContainer.appendChild(item);
  });
}

/**
 * ===================================================================
 * B∆Ø·ªöC 3: CH·ªåN D√íNG S·∫¢N PH·∫®M (H√†m onParentProductClick(pp))
 * ===================================================================
 * X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng click v√†o m·ªôt d√≤ng s·∫£n ph·∫©m (ParentProduct).
 * T√¨m ki·∫øm th√¥ng tin gi√° (pricingInfo) v√† c√°c SKU (lon) ph√π h·ª£p,
 * sau ƒë√≥ chuy·ªÉn sang panel hi·ªÉn th·ªã danh s√°ch SKU. *
 * @param parentProduct - ƒê·ªëi t∆∞·ª£ng ParentProduct ƒë√£ ch·ªçn.
 * ===================================================================
 */
function onParentProductClick(parentProduct: ParentProduct) {
  console.log("ƒê√£ ch·ªçn D√≤ng SP:", parentProduct);
  currentState.selectedParentProduct = parentProduct; // L∆∞u d√≤ng SP ƒë√£ ch·ªçn

  // 2. Logic (ph·ª©c t·∫°p):
  if (!currentState.selectedColor || !DB.colorPricings || !DB.products) {
    return;
  }
  const colorId = currentState.selectedColor.id;
  const productType = parentProduct.color_mixing_product_type;

  // T√¨m M·ªòT (1) d√≤ng trong `DB.colorPricings` kh·ªõp C·∫¢ HAI
  const pricingInfo: ColorPricing | undefined = DB.colorPricings.find(p =>
    p.color_ref == colorId && p.color_mixing_product_type == productType
  );

  if (!pricingInfo) {
    console.error("L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y pricingInfo cho:", colorId, productType);
    skuListContainer.innerHTML = '<p>L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° cho s·∫£n ph·∫©m n√†y.</p>';
    navigateToPanel('skus', parentProduct.name);
    return;
  }

  console.log("Th√¥ng tin gi√°:", pricingInfo); // (v√≠ d·ª•: { base: 'A', pricePerMl: 1 })

  // D√πng `pricingInfo.base` v√† `parentProduct.id` ƒë·ªÉ l·ªçc `DB.products`
  const applicableSKUs = DB.products.filter(sku =>
    sku.parent_product_ref == parentProduct.id && sku.base == pricingInfo.base
  );

  console.log("C√°c SKU (lon) ph√π h·ª£p:", applicableSKUs);

  // 3. Hi·ªÉn th·ªã danh s√°ch SKU (lon) ph√π h·ª£p v√† t√≠nh gi√°
  renderSKUs(applicableSKUs, pricingInfo);

  // 4. Chuy·ªÉn UI sang panel SKU
  navigateToPanel('skus', parentProduct.name);
}

/**
 * ===================================================================
 * B∆Ø·ªöC 4: T√çNH GI√Å (H√†m calculatePrice)
 * =================================================================== *
 * T√≠nh to√°n gi√° base, gi√° m√†u th√™m v√† gi√° th√†nh ph·∫©m cho m·ªôt SKU c·ª• th·ªÉ.
 * @param sku - ƒê·ªëi t∆∞·ª£ng SKU t·ª´ DB.products
 * @param pricingInfo - ƒê·ªëi t∆∞·ª£ng pricingInfo t·ª´ DB.colorPricings
 * @returns {{giaBase: number, giaMau: number, giaThanhPham: number}} C√°c th√†nh ph·∫ßn gi√°
 */
function calculatePrice(sku: Product, pricingInfo: ColorPricing) {
  const giaBase = parseFloat(String(sku.basePrice)) || 0;
  const unitValue = parseFloat(String(sku.unit_value)) || 0;

  // Chuy·ªÉn ƒë·ªïi dung t√≠ch sang mililit ƒë·ªÉ t√≠nh gi√° m√†u ch√≠nh x√°c
  let volumeInMl = 0;
  if (sku.unit === 'L√≠t') {
    volumeInMl = unitValue * 1000; // 1 L√≠t = 1000 ml
  } else if (sku.unit === 'ml') {
    volumeInMl = unitValue; // ƒê√£ l√† mililit
  } else {
    // X·ª≠ l√Ω c√°c ƒë∆°n v·ªã kh√°c n·∫øu c√≥, ho·∫∑c ƒë∆∞a ra c·∫£nh b√°o.
    // Hi·ªán t·∫°i, gi·∫£ ƒë·ªãnh c√°c s·∫£n ph·∫©m pha m√†u lu√¥n c√≥ ƒë∆°n v·ªã th·ªÉ t√≠ch.
    console.warn(`ƒê∆°n v·ªã kh√¥ng x√°c ƒë·ªãnh cho SKU ${sku.id}: ${sku.unit}. Gi·∫£ ƒë·ªãnh unit_value l√† L√≠t.`);
    volumeInMl = unitValue * 1000;
  }

  // pricePerMl l√† gi√° th√™m cho m·ªói mililit
  const giaMau = (parseFloat(String(pricingInfo.pricePerMl)) || 0) * volumeInMl;
  const giaThanhPham = giaBase + giaMau;

  return { giaBase, giaMau, giaThanhPham };
}

/**
 * ===================================================================
 * B∆Ø·ªöC 4: HI·ªÇN TH·ªä SKU V√Ä GI√Å (H√†m renderSKUs)
 * =================================================================== *
 * Hi·ªÉn th·ªã danh s√°ch c√°c SKU (lon) ph√π h·ª£p c√πng v·ªõi th√¥ng tin gi√° ƒë√£ t√≠nh to√°n.
 * @param skus - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng SKU c·∫ßn hi·ªÉn th·ªã.
 * @param pricingInfo - Th√¥ng tin gi√° pha m√†u cho m√†u v√† lo·∫°i s·∫£n ph·∫©m hi·ªán t·∫°i.
 * @returns {void}
 */
function renderSKUs(skus: Product[], pricingInfo: ColorPricing) {
  skuListContainer.innerHTML = ''; // X√≥a n·ªôi dung c≈©
  if (!skus || skus.length === 0) {
    skuListContainer.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y lon (SKU) ph√π h·ª£p cho lo·∫°i base n√†y.</p>';
    return;
  }

  skus.forEach(sku => {
    const { giaBase, giaMau, giaThanhPham } = calculatePrice(sku, pricingInfo);

    // Th√™m thu·ªôc t√≠nh aria-live cho loader
    const loaderElement = document.getElementById(DOM_IDS.LOADER);
    if (loaderElement && !loaderElement.hasAttribute('aria-live')) {
      loaderElement.setAttribute('aria-live', 'polite');
      loaderElement.setAttribute('aria-atomic', 'true');
    }

    const item = createElement('div', { className: 'sku-item' },
      createElement('div', { className: 'sku-name', textContent: sku.name }),
      createElement('div', { className: 'price-row' },
        createElement('span', { textContent: `Gi√° Base (${sku.base}):` }),
        createElement('span', { textContent: `${giaBase.toLocaleString('vi-VN')} ƒë` })
      ),
      createElement('div', { className: 'price-row' },
        createElement('span', { textContent: 'Gi√° M√†u (Th√™m):' }),
        createElement('span', { textContent: `${giaMau.toLocaleString('vi-VN')} ƒë` })
      ),
      createElement('div', { className: 'price-row total' },
        createElement('span', { textContent: 'Gi√° Th√†nh Ph·∫©m:' }),
        createElement('span', { textContent: `${giaThanhPham.toLocaleString('vi-VN')} ƒë` })
      )
    );
    skuListContainer.appendChild(item);
  });
}


/**
 * ===================================================================
 * H√ÄM TI·ªÜN √çCH (ƒêi·ªÅu h∆∞·ªõng UI)
 * ===================================================================
 */

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ t·∫°o ph·∫ßn t·ª≠ DOM m·ªôt c√°ch an to√†n v√† c√≥ c·∫•u tr√∫c.
 * @param tag T√™n th·∫ª HTML (v√≠ d·ª•: 'div', 'span').
 * @param props C√°c thu·ªôc t√≠nh ƒë·ªÉ g√°n cho ph·∫ßn t·ª≠ (v√≠ d·ª•: className, textContent).
 * @param children C√°c ph·∫ßn t·ª≠ con ƒë·ªÉ n·ªëi v√†o.
 * @returns Ph·∫ßn t·ª≠ HTMLElement ƒë√£ ƒë∆∞·ª£c t·∫°o.
 */
function createElement<K extends keyof HTMLElementTagNameMap>(
  tag: K,
  props: Partial<Omit<HTMLElementTagNameMap[K], 'style'>> & { style?: Partial<CSSStyleDeclaration> },
  ...children: (HTMLElement | string)[]
): HTMLElementTagNameMap[K] {
  const element = document.createElement(tag);
  Object.assign(element, props);
  children.forEach(child => element.append(child));
  return element;
}

/**
 * H√†m ƒëi·ªÅu h∆∞·ªõng chung
 * @param panelName - T√™n panel
 * @param title - Ti√™u ƒë·ªÅ m·ªõi
 */
function navigateToPanel(panelName: AppState['panel'], title: string) {
  // ·∫®n t·∫•t c·∫£ c√°c panel
  Object.values(panels).forEach(panel => panel?.classList.remove('active'));

  // Hi·ªÉn th·ªã panel ƒë∆∞·ª£c ch·ªçn
  if (panels[panelName]) {
    panels[panelName].classList.add('active');
  }

  // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
  panelTitle.textContent = title;
  currentState.panel = panelName;

  // Qu·∫£n l√Ω n√∫t back
  if (panelName === 'colors') {
    backButton.classList.add('hidden');
    // Khi quay v·ªÅ trang m√†u, reset b·ªô l·ªçc
    applyFilters();
  } else {
    backButton.classList.remove('hidden');
  }

  // Qu·∫£n l√Ω b·ªô l·ªçc
  if (panelName === 'colors') {
    headerElement.classList.remove('hidden');
  } else {
    // ·∫®n b·ªô l·ªçc khi xem chi ti·∫øt
    headerElement.classList.add('hidden');
  }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "L√†m m·ªõi".
 * X√≥a cache v√† t·∫£i l·∫°i to√†n b·ªô ·ª©ng d·ª•ng.
 */
async function handleRefreshClick() {
  console.log("Y√™u c·∫ßu l√†m m·ªõi d·ªØ li·ªáu...");
  localStorage.removeItem(CACHE_KEY);
  console.log("Cache ƒë√£ ƒë∆∞·ª£c x√≥a.");
  await fetchAndSetupApplication();
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Back".
 * ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng quay l·∫°i panel tr∆∞·ªõc ƒë√≥ d·ª±a tr√™n `currentState.panel`.
 * @returns {void}
 */
function handleBackClick() {
  if (currentState.panel === 'skus') {
    // T·ª´ SKU quay v·ªÅ D√≤ng SP (ParentProduct)
    if (!currentState.selectedColor) return;
    // C·∫ßn g·ªçi l·∫°i onColorClick ƒë·ªÉ render l·∫°i danh s√°ch ParentProduct
    onColorClick(currentState.selectedColor);
  } else if (currentState.panel === 'parentProducts') {
    // T·ª´ D√≤ng SP quay v·ªÅ Danh s√°ch m√†u
    navigateToPanel('colors', 'T·∫•t C·∫£ M√†u');
  }
}
